name: CI
env:
  DEBUG: 'napi:*'

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]

    name: stable - ${{ matrix.os }} - node@14
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-${{ matrix.os }}-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-${{ matrix.os }}-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Cargo test
        uses: actions-rs/cargo@v1
        timeout-minutes: 5
        with:
          command: test
          args: -p node-rs-bcrypt --lib -- --nocapture

      - name: Run build
        run: yarn build
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.os }}
          path: packages/*/*.node

  build-windows-i686:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: stable - windows-i686 - node@14
    runs-on: windows-latest
    env:
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 32
      CARGO_PROFILE_RELEASE_LTO: 'false'
    steps:
      - uses: actions/checkout@v2

      - name: Install node x86
        run: |
          choco install nodejs-lts --x86 -y --force
          refreshenv
      - name: Set 32bit NodeJS path
        run: |
          echo "C:\\Program Files (x86)\\nodejs" >> $GITHUB_PATH
        shell: bash

      - name: NodeJS arch
        run: node -e "console.log(process.arch)"

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-windows-i686-node@lts-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Build TypeScript
        run: yarn build:ts

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install i686 toolchain
        run: rustup target add i686-pc-windows-msvc

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-windows-i686-node@lts-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-windows-i686-node@lts-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo test
        uses: actions-rs/cargo@v1
        timeout-minutes: 5
        with:
          command: test
          args: -p node-rs-bcrypt --lib -- --nocapture

      - name: Run build
        run: npx lerna exec "yarn build --target i686-pc-windows-msvc" --concurrency 1 --stream --no-prefix

      - name: Test bindings
        run: yarn test

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-win32-i686
          path: packages/*/*.node

  build-musl:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: stable - linux-musl - node@10
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Login to registry
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
        env:
          DOCKER_REGISTRY_URL: docker.pkg.github.com
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-node-alpine-@10-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-node-alpine-@10-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Pull docker image
        run: |
          docker pull docker.pkg.github.com/napi-rs/napi-rs/nodejs-rust:10-alpine
          docker tag docker.pkg.github.com/napi-rs/napi-rs/nodejs-rust:10-alpine builder

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: 'Build'
        run: |
          docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/node-rs -w /node-rs builder sh -c "yarn build"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-linux-musl
          path: packages/**/*.node

  build-linux-aarch64:
    name: stable - aarch64-unknown-linux-gnu - node@14
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: 14
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install aarch64 toolchain
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-linux-aarch64-gnu-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-linux-aarch64-gnu-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-linux-aarch64-gnu-node@14-${{ hashFiles('yarn.lock') }}

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y
      - name: Install dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Cross build aarch64
        run: yarn build -- -- --target aarch64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-linux-aarch64
          path: packages/*/*.node

  build-linux-arm7:
    name: stable - arm7-unknown-linux-gnu - node@14
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-linux-arm7-gnu-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-linux-arm7-gnu-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-linux-arm7-gnu-node@14-${{ hashFiles('yarn.lock') }}

      - name: Install aarch64 toolchain
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf -y
      - name: Install dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Cross build arm7
        run: yarn build -- -- --target armv7-unknown-linux-gnueabihf

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-linux-arm7
          path: packages/*/*.node

  build-apple-silicon:
    name: stable - aarch64-apple-darwin - node@14
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: 14
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install aarch64 toolchain
        run: rustup target add aarch64-apple-darwin

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-apple-aarch64-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-apple-aarch64-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-apple-aarch64-node@14-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Cross build aarch64
        run: yarn build -- -- --target aarch64-apple-darwin

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-apple-aarch64
          path: packages/*/*.node

  build-android-aarch64:
    name: Build - Android - aarch64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install aarch64 toolchain
        run: rustup target add aarch64-linux-android

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-apple-aarch64-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-apple-aarch64-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-apple-aarch64-node@14-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Build
        shell: bash
        run: |
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android24-clang"
          yarn build -- -- --target aarch64-linux-android

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-android-aarch64
          path: packages/*/*.node

  test-binding:
    name: Test bindings on ${{ matrix.os }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
        node: ['10', '12', '14', '15']
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      # Do not cache node_modules, or yarn workspace links broken
      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Build TypeScript
        run: yarn build:ts

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-${{ matrix.os }}
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts
        shell: bash

      - name: Test bindings
        run: yarn test

      - name: List packages
        run: ls -R packages
        shell: bash

  test-musl-binding:
    name: Test bindings on alpine docker image - node@${{ matrix.node }}
    needs:
      - build-musl
    strategy:
      fail-fast: false
      matrix:
        node: ['10', '12', '14', '15']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --ignore-scripts --registry https://registry.npmjs.org

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-linux-musl
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List packages
        run: ls -R packages
        shell: bash

      - name: Build TypeScript
        run: yarn build:ts

      - name: Run simple tests
        run: docker run --rm -v $(pwd):/node-rs -w /node-rs node:${{ matrix.node }}-alpine sh -c "node ./scripts/simple-tests.js"

  test-linux-aarch64:
    name: stable - aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    runs-on: ubuntu-latest

    needs:
      - build-linux-aarch64
    strategy:
      fail-fast: false
      matrix:
        node: ['10', '12', '14', '15']

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-test-aarch64-linux-node@${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Build TypeScript
        run: yarn build:ts

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-linux-aarch64
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List
        run: ls -a

      - name: Run tests
        uses: docker://multiarch/ubuntu-core:arm64-focal
        with:
          args: >
            sh -c "
              apt-get update && \
              apt-get install -y ca-certificates gnupg2 curl && \
              curl -sL https://deb.nodesource.com/setup_${{ matrix.node }}.x | bash - && \
              apt-get install -y nodejs && \
              node ./scripts/simple-tests.js
            "

  dependabot:
    needs:
      - test-musl-binding
      - test-binding
      - test-linux-aarch64
      - build-android-aarch64
      - build-linux-arm7
      - build-apple-silicon
      - build-windows-i686
    runs-on: ubuntu-latest
    steps:
      - name: auto-merge
        uses: ridedott/dependabot-auto-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-binding
      - test-musl-binding
      - test-linux-aarch64
      - build-android-aarch64
      - build-linux-arm7
      - build-apple-silicon
      - build-windows-i686
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: 14
          check-latest: true

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-ubuntu-latest-publish-${{ hashFiles('yarn.lock') }}

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: Move artifacts
        run: yarn artifacts

      - name: Build TypeScript
        run: yarn build:ts

      - name: List packages
        run: ls -R packages
        shell: bash

      - name: Lerna publish
        if: "startsWith(github.event.head_commit.message, 'chore(release): publish')"
        run: |
          find ./packages/ -type d -maxdepth 1 -exec cp LICENSE {} \;
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npx lerna publish from-package --no-verify-access --yes
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
